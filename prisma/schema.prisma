// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  firstName String?
  lastName  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  tasks         Task[]
  categories    Category[]
  notifications Notification[]

  @@map("users")
}

model Category {
  id          String   @id @default(cuid())
  name        String
  color       String   @default("#3B82F6") // Default blue color
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId        String
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks         Task[]
  notifications Notification[]

  @@unique([userId, name]) // User can't have duplicate category names
  @@map("categories")
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  completed   Boolean    @default(false)
  priority    String     @default("MEDIUM")
  dueDate     DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  userId        String
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  categoryId    String?
  category      Category?      @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  attachments   Attachment[]
  notifications Notification[]

  @@map("tasks")
}

model Notification {
  id        String   @id @default(cuid())
  title     String
  message   String
  type      String
  isRead    Boolean  @default(false)
  readAt    DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId            String
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  relatedTaskId     String?
  relatedTask       Task?     @relation(fields: [relatedTaskId], references: [id], onDelete: Cascade)
  relatedCategoryId String?
  relatedCategory   Category? @relation(fields: [relatedCategoryId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Attachment {
  id           String   @id @default(cuid())
  filename     String
  originalName String
  mimeType     String
  size         Int
  url          String
  createdAt    DateTime @default(now())

  // Relations
  taskId String
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("attachments")
}
